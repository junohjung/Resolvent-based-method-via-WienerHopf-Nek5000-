c--------------------------------------------------------------------
c           Modules

      include 'Shapes.f'            ! Defines domain "Shapes", used as support for sensors and actuators
      include 'SavePerturbations.f' ! Module for saving perturbations to disk
      include 'Control.f'           ! Control module based on a control law based on the convolution of a control Kernel and sensor readings



c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      use Control
      use Shapes
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      real fffx,fffy,fffz
      real tmp
      integer , save :: lastISTEP = -1 , icount = 0
      integer ix,iy,iz, eg,e,ijke ,ntot , nloc
      integer currIter,sensRange(2),actRange(2)
      COMMON /ResMode/ currIter,sensRange,actRange
      e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      tmp = 6.14*cos(x*485. + time*3.78)
      tmp = 6.14*sin(y*357 + tmp*352.75)
      tmp = sin(100.45*x+250.48*y+335.54*time + tmp*352.23)
          
      ffx = tmp
      tmp = 6.14*cos(x*985.54 + time)
      tmp = 6.14*sin(y*457.12 + tmp*252)
      tmp = sin(137.58*x+218.9*y+335.75*time + tmp*652.45)
      ffy = tmp
      ffz = 0
      ! ffx = 0
      ! ffy = 0
      ! ffz = 0
      if (x>-5  ) then
           !Filters external forces for x > -5, as Pff(x,x') = h(x-5)delta(x-x') is assumed.
         ffx = 0 
         ffy = 0 
         ffz = 0 
      endif

      if (currIter == 6) then
          !If on NL control run, uses the "Control" module to compute the actuation of each actuator.
          do i=1,(actRange(2)-actRange(1)+1) ! loop from 1 to the number of actuators
            call getShape(actRange(1)-1+i,x,y,z,fffx,fffy,fffz) ! get the shape of the i-th actuator
            
            ! Add actuation to the external forces
            ffx = ffx - Control_Actuation(i)*fffx
            ffy = ffy - Control_Actuation(i)*fffy
            ffz = ffz - Control_Actuation(i)*fffz
          enddo
      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c      use FLD2Force
      use Control
      use Shapes

      implicit none
      include 'SIZE'
      include 'TSTEP'           ! ISTEP
      include 'INPUT'           ! PARAM
      include 'SOLN'            ! V[XYZ]
      include 'GEOM'            ! xm1,ym1
      include 'ADJOINT'
      include 'MASS'

      integer e,eg, ntot1
      integer ntot,i,j,ishape
c      integer nShapes   
      character(len=100) fileName
      character(len=100) FLDReference 
      character(len=100) fileAdd1 
      real,external::glsum      
      real pertNorm(lpert) , maxnorm 
      real readings(30)
      real xx,yy,sx,sy,sz      
      real,save :: baseFlow_readings(30)
      real,save :: ubase(lx1,ly1,lz1,lelv)
      real,save :: vbase(lx1,ly1,lz1,lelv)
      real,save :: ProjectOnShapesD(15)
      real,save :: absTol = 0
      real,save ::  relativeTol = 1e-4
      real , save :: exitTime = 1e99
      logical, save :: runCompleted = .false. 
      logical, save :: firstSave = .true. 
      logical , save :: firstCall = .true.
      integer currIter,sensRange(2),actRange(2) 
      COMMON /ResMode/ currIter,sensRange,actRange
      ntot = lx1*ly1*lz1*lelv

      ! Save Mass Matrix for posprocessing
      ! Mass matrix can be usefull for some posprocessing. It is not nedded for 
      ! control, but can be helpful to compute perturbation norms, etc 
      if (NIO==0) write(*,*) "Saving Mass Matrix on istep==0"
      if (istep==0) then
            call exportShapes()
            ifxyo = .true.
            call outpost2(bm1,bm1,
     $                    bm1,bm2,
     $                    bm1,0,'bm1')
            if (currIter==-3) call exitt

      endif

      ! compute DNS perturbation

      if (istep==0) then
      baseFlow_readings = ProjectOnShapes(0)
      endif
      
      if (istep==0) then
          do i=1,ntot
     	      ubase(i,1,1,1) = vx(i,1,1,1)
	      vbase(i,1,1,1) = vy(i,1,1,1)
          enddo
      endif

      do ishape = 1,15
      	 ProjectOnshapesD(ishape) = 0
      enddo	 
      

      if (npert ==0 ) then
        !routine for reading non-linear run sensors
       do i = 1,ntot
         do ishape = 1,15
           call getShape(ishape,xm1(i,1,1,1),ym1(i,1,1,1),
     $                          zm1(i,1,1,1),sx,sy,sz)
           ProjectOnShapesD(ishape) = ProjectOnShapesD(ishape)  +
     $           ((vx(i,1,1,1)-ubase(i,1,1,1))*sx +
     $           (vy(i,1,1,1)-vbase(i,1,1,1))*sy )*bm1(i,1,1,1)
           if (ndim>2) ProjectOnShapesD(ishape) = 
     $         ProjectOnShapesD(ishape)+vz(i,1,1,1)*sz*bm1(i,1,1,1)
         enddo
       enddo
      else
       !routine for reading linearized run sensors
       do i = 1,ntot
          do ishape = 1,15
           call getShape(ishape,xm1(i,1,1,1),ym1(i,1,1,1),
     $                         zm1(i,1,1,1),sx,sy,sz)
           ProjectOnShapesD(ishape) = ProjectOnShapesD(ishape)  +
     $       (vxp(i,1)*sx + vyp(i,1)*sy )*bm1(i,1,1,1)
           if (ndim>2) ProjectOnShapesD(ishape) = 
     $        ProjectOnShapesD(ishape)+Vzp(i,1)*sz*bm1(i,1,1,1)
          enddo
       enddo
      endif

      do ishape = 1,15
         ProjectOnShapesD(ishape) = glsum(ProjectOnShapesD(ishape),1)
      enddo

      
      
      if (NIO==0 ) then
          write(fileName,'(A,I0.2,A)') 'ProjShapes_',i,'.dat'
          if (firstCall ) then
            open(unit=88, file=fileName,
     $        status="replace", action="write")
            write(88,'(A)', advance="no") 'time' 
            do j = 1,15
              write(88,'(A,I0.2)',advance="no") '   ProjOnShape_' , i
            enddo ! header loop
            write(88,*) ' ' 
          else
            open(unit=88, file=fileName,
     $       status='old',action='write',position="append")
          endif !firs tcall
          write(88,*) time , ProjectOnShapesD(1:15)
          close(88)       
      endif  ! NIO 
      firstCall = .false.




      ! If on a DNS control run (currIter=6), update the Control module. 
      if (currIter == 6) then
        ! Initialize control on the first time step.
        if (istep ==0) then
           if (NIO==0) write(*,*) 'Init Control Module...  '
           fileAdd1 = 'ControlLawParams.txt' ! Control parameter file. Includes number of sensors, actuators, delta t and control laws.
           call ControlInit(fileAdd1)
        endif 
        
        readings=ProjectOnShapes(0)
        
        write(*,*) 'Update Control Module...  '      
        ! Use the shapes module to obtain current sensor readings. Print them for debug purposes.   

	if (NIO==0) write(*,*) 'Current Readings ',
     $       time,readings(sensRange(1):sensRange(2))
     $- baseFlow_readings(sensRange(1):sensRange(2)),
     $ readings(sensRange(1):sensRange(2)),
     $ baseFlow_readings(sensRange(1):sensRange(2))
     
     
        call ControlUpdateReadings(
     $	     time,readings(sensRange(1):sensRange(2))
     $	     - baseFlow_readings(sensRange(1):sensRange(2)))

c        call ControlUpdateReadings(
c     $	     time,readings(sensRange(1):sensRange(2)))

       ! Update sensor history on the "Control" module 
        call Control_CalcActuations()
       ! Print the "Control" module  sensor history  for debug.
        call ControlPrintReadingsHist()
       ! Print the "Control" module  current actuations.
        call ControlPrintActuation()
       ! Save the "Control"  module history (actuation and readings). Useful for debug.
        call SaveControlHist()
      endif     
      




      ! Save current sensor readings (used latter to obtain control laws).
      call SaveProjUp2Shapes(1,1)



      if (NIO==0) write(*,*) 'Computing run Norm...'
      maxnorm = 0
      if (npert == 1) then
       	  do j=1,npert
            pertNorm(j) = 0
            do i=1,ntot 
              pertNorm(j) = pertNorm(j) + 
     c        ( vxp(i,j)**2 + vyp(i,j)**2 )*bm1(i,1,1,1)
            enddo
            pertNorm(j) = glsum(pertNorm(j),1)
            pertNorm(j) = sqrt(pertNorm(j))
            
           maxnorm = max(maxnorm,pertNorm(j))  
      	  end do
      else
       	 do j=1,1
            pertNorm(j) = 0
            do i=1,ntot 
              pertNorm(j) = pertNorm(j) + 
     c        ((vx(i,1,1,1)-ubase(i,1,1,1))**2   +
     c	      (vy(i,1,1,1)-vbase(i,1,1,1))**2 )*bm1(i,1,1,1)
            enddo
            pertNorm(j) = glsum(pertNorm(j),1)
            pertNorm(j) = sqrt(pertNorm(j))
            
            maxnorm = max(maxnorm,pertNorm(j))  
      	 end do
      endif




      ! sets run tolerance: run stops when the current norm is 10^-5 (relative norm) of the maximum norm.
      absTol = max(absTol,maxnorm*relativeTol)  
      if (NIO==0) write(*,*) 'AbsTol : ', absTol,
     $   ' rel', relativeTol  ,' pertNorm ', maxnorm
      
      ! Writes current perturbation norm to file
      if (NIO==0) then
        if (istep == 0) then
          open (unit=98, file='runNorm.txt',
     $            status='replace',action='write')
        else
          open (unit=98, file='runNorm.txt',
     $        position="append" ,status='old',action='write')
        endif
        write(98,*) time , maxnorm , exitTime, absTol !,runCompleted
        close(98)
      endif

c      if (NIO==0) write(*,*) 'Save Flow...'
c      if ( maxnorm > absTol ) then
c        ifxyo = firstSave
c        if (currIter==6) call SavePerturbations('c') ! control run
c        firstSave = .false.
c      endif

c      if ( maxnorm < absTol .and. runCompleted ) then
c      if (NIO==0) write(*,*) 'Creating runCompled file...'
c        open (unit=98, file='runCompleted',
c     $            status='replace',action='write')
c        write(98,*) 'Done' 
c        close(98)
c        
c        call exitt
c      end if




      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

c      ux=0.0
c      uy=0.0
c      uz=0.0

      ux = y*(1.0-y)*4.0
      uy = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

c      ux = 0.0
c      uy = 0.0
c      uz = 0.0
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      use Shapes
      include 'SIZE'
      include 'TOTAL'
      integer :: a
      character(len=100) fileAdd1 
c      integer nio
      integer currIter,sensRange(2),actRange(2)
      COMMON /ResMode/ currIter,sensRange,actRange

      ! Reads the run type, as well as sensor and actuator ranges 
      ! i.e. range 1-3 indicates that shapes 1,2 and 3 are used.  
      open (unit=98, file='currRun.txt',
     $                status='old',action='read')
      read(98,*) currIter
      close(98)
      open (unit=98, file='sensRange.txt',
     $                status='old',action='read')
      read(98,*) sensRange
      close(98)
      open (unit=98, file='actRange.txt',
     $                status='old',action='read')
      read(98,*) actRange
      close(98)      
      
      ! Initi "Shapes" module. 'Shapes.txt' provides a parametric list of shapes.
      fileAdd1='shapes.txt'
      call ReadShapesFile(fileAdd1)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c      include 'MASS'
      integer currIter,sensRange(2),actRange(2)
      COMMON /ResMode/ currIter,sensRange,actRange
c
      !Save Undeformed Mass Matrix (before loading external fld) for posprocessing.
      if (istep==0) then
            ifxyo = .true.
            call outpost2(bm1,bm1,
     $                    bm1,bm2,
     $                    bm1,0,'bm0')
      endif
      if (currIter==-3) call exitt

      return
      end
c-----------------------------------------------------------------------
